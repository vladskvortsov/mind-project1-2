name: Deploy images to ECR
on: 
  workflow_dispatch:
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - 'project1/backend_redis/Dockerfile'
  #     - 'project1/backend_rds/Dockerfile'
jobs:
  create-ecr-repository:
   runs-on: ubuntu-latest
   steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Create ECR Repository
      run: |
        REPO_NAME="project1-2-backend"
        
        # Check if the repository already exists
        EXISTING_REPO=$(aws ecr describe-repositories --repository-names $REPO_NAME --query "repositories[0].repositoryName" --output text 2>/dev/null || echo "None")
        
        if [ "$EXISTING_REPO" == "None" ]; then
          echo "ECR repository does not exist. Creating repository..."
          aws ecr create-repository --repository-name $REPO_NAME
          echo "ECR repository created: $REPO_NAME"
        else
          echo "Using existing ECR repository: $EXISTING_REPO"
        fi

  deploy-rds-backend-to-ecr:
   runs-on: ubuntu-latest
   needs: create-ecr-repository
   steps:
     - name: Checkout 
       uses: actions/checkout@v3

     - id: ecr-publish
       name: Build image
       uses: bitovi/github-actions-ecr-publish@v0.1.0
       with:
         aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws_default_region: ${{ secrets.AWS_REGION }}
         aws_ecr_repo_name: project1-2-backend
         image_tag: backend-rds
         working_directory: ./backend_rds/


  deploy-redis-backend-to-ecr:
    runs-on: ubuntu-latest
    needs: create-ecr-repository
    steps:
      - name: Checkout 
        uses: actions/checkout@v3

      - id: ecr-publish
        name: Build image
        uses: bitovi/github-actions-ecr-publish@v0.1.0
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_default_region: ${{ secrets.AWS_REGION }}
          aws_ecr_repo_name: project1-2-backend
          image_tag: backend-redis
          working_directory: ./backend_redis/

  update-images-on-server:
    continue-on-error: true
    runs-on: ubuntu-latest
    needs:
    - deploy-rds-backend-to-ecr
    - deploy-redis-backend-to-ecr
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ec2-connect

    - name: Fetch EC2 Instance ID
      id: get-instance-id
      run: |
        INSTANCE_NAME="project1-2-backend"
        INSTANCE_ID=$(aws ec2 describe-instances \
          --filters "Name=tag:Name,Values=$INSTANCE_NAME" \
                    "Name=instance-state-name,Values=running" \
          --query "Reservations[*].Instances[*].InstanceId" \
          --output text)

        if [ -z "$INSTANCE_ID" ]; then
          echo "Error: No running instance found with name $INSTANCE_NAME"
          exit 1
        fi

        echo "Instance ID for $INSTANCE_NAME: $INSTANCE_ID"
        echo "instance_id=$INSTANCE_ID" >> $GITHUB_OUTPUT

    - name: Run SSH Command
      id: ssh-command
      uses: leonowski/ec2-ssh-ghactions@v1
      with:
        username: ubuntu
        ec2_instance_id: ${{ steps.get-instance-id.outputs.instance_id }}
        region: ${{ secrets.AWS_REGION }}
        command: |
          cd /home/ubuntu
          sudo docker-compose down
          sudo docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/project1-2-backend:backend-rds
          sudo docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/project1-2-backend:backend-redis
          sudo docker-compose up -d

    - name: Output
      run: |
        echo -e "${{ steps.ssh-command.outputs.command_output }}"
